{
    "id": "plan-b29ab427-854d-41ed-92c1-341fb20c899e",
    "plan_context": {
        "query": "\nStep 1 — Perplexity (URL curation only)\nYou are a strict URL curator. Find the current OFFICIAL pricing/help pages needed to extract CONSUMER “chatbot access” pricing for:\n1) OpenAI ChatGPT (chatgpt.com)\n2) Anthropic Claude (claude.ai)\n3) xAI Grok (grok.com / help.x.com)\n\nRules:\n- Prefer official pricing/help/FAQ pages over blogs or news.\n- Return ONLY a compact JSON with keys: {\"chatgpt_urls\":[], \"claude_urls\":[], \"grok_urls\":[]}.\n- Each array must contain 1-4 canonical URLs (no duplicates, no tracking params).\n- Do NOT include commentary.\n\nStep 2 — Firecrawl (fetch and clean)\nRun Firecrawl on each URL from step 1. Ask Firecrawl to return clean text/Markdown. If your tool allows a prompt, use:\n\nCrawl each provided URL at depth 0.\nReturn the page content as plain Markdown (no boilerplate navigation).\nInclude page title, last-modified if available, and full canonical URL at the top.\n\nStep 3 — Perplexity (structured extraction)\nGoal: turn Firecrawl text into the pricing JSON.\nYou are a pricing extraction agent. Use ONLY the Firecrawl page texts below (treat them as ground truth). \nExtract CONSUMER chatbot access pricing for ChatGPT, Claude, and Grok.\n\nOutput currency preference keep USD.\n\nINPUT PAGES (verbatim from Firecrawl):\n\nREQUIREMENTS:\n1) Extract only clearly stated plans and prices.\n2) If a plan says “from $X”, use \"price_from\".\n3) If a plan is region-limited or bundled (e.g., access via X Premium+), put that in \"notes\" and \"availability\".\n4) Every plan MUST include a \"sources\" array with the exact canonical URLs you used.\n5) If something is unclear on all supplied pages, set that numeric field to null and add a concise \"notes\".\n",
        "tool_ids": [
            "mcp:firecrawl:firecrawl_check_crawl_status",
            "mcp:firecrawl:firecrawl_crawl",
            "mcp:firecrawl:firecrawl_deep_research",
            "mcp:firecrawl:firecrawl_extract",
            "mcp:firecrawl:firecrawl_generate_llmstxt",
            "mcp:firecrawl:firecrawl_map",
            "mcp:firecrawl:firecrawl_scrape",
            "mcp:firecrawl:firecrawl_search",
            "mcp:perplexity-ask:perplexity_ask"
        ]
    },
    "steps": [
        {
            "task": "Use a URL curation process to retrieve the current official pricing/help pages for consumer chatbot access pricing for OpenAI ChatGPT (chatgpt.com), Anthropic Claude (claude.ai), and xAI Grok (grok.com / help.x.com). Return only a compact JSON with keys {\"chatgpt_urls\":[], \"claude_urls\":[], \"grok_urls\":[]} ensuring each array holds 1-4 canonical URLs without duplicates or tracking parameters.",
            "inputs": [],
            "tool_id": "mcp:perplexity-ask:perplexity_ask",
            "output": "$urls",
            "condition": null
        },
        {
            "task": "Fetch and clean the content of the ChatGPT pricing/help page. Crawl the URL from the first element of the 'chatgpt_urls' array provided in the output of the previous step. Use a fetching process with the instruction to crawl at depth 0, and return the page content as plain Markdown that includes the page title, last-modified if available, and the full canonical URL at the top.",
            "inputs": [
                {
                    "name": "$urls",
                    "description": "Output from the URL curation step containing 'chatgpt_urls'."
                }
            ],
            "tool_id": "mcp:firecrawl:firecrawl_scrape",
            "output": "$chatgpt_page",
            "condition": null
        },
        {
            "task": "Fetch and clean the content of the Anthropic Claude pricing/help page. Crawl the URL from the first element of the 'claude_urls' array provided in the output of the URL curation step. Use a fetching process with the instruction to crawl at depth 0, and return the page content as plain Markdown that includes the page title, last-modified if available, and the full canonical URL at the top.",
            "inputs": [
                {
                    "name": "$urls",
                    "description": "Output from the URL curation step containing 'claude_urls'."
                }
            ],
            "tool_id": "mcp:firecrawl:firecrawl_scrape",
            "output": "$claude_page",
            "condition": null
        },
        {
            "task": "Fetch and clean the content of the xAI Grok pricing/help page. Crawl the URL from the first element of the 'grok_urls' array provided in the output of the URL curation step. Use a fetching process with the instruction to crawl at depth 0, and return the page content as plain Markdown that includes the page title, last-modified if available, and the full canonical URL at the top.",
            "inputs": [
                {
                    "name": "$urls",
                    "description": "Output from the URL curation step containing 'grok_urls'."
                }
            ],
            "tool_id": "mcp:firecrawl:firecrawl_scrape",
            "output": "$grok_page",
            "condition": null
        },
        {
            "task": "Using the texts obtained from the previous fetching steps ($chatgpt_page, $claude_page, and $grok_page), extract the consumer chatbot access pricing details for ChatGPT, Claude, and Grok. The extraction must include clearly stated plans and prices, with any price indicated as 'from $X' mapped to a 'price_from' field, and region-limited or bundled plans flagged with 'notes' and 'availability'. All plans must include a 'sources' array with the exact canonical URL(s) used. If any numeric field is unclear, set it to null and add a concise note. Output the pricing details in USD.",
            "inputs": [
                {
                    "name": "$chatgpt_page",
                    "description": "Clean page content in Markdown for ChatGPT from step 2."
                },
                {
                    "name": "$claude_page",
                    "description": "Clean page content in Markdown for Anthropic Claude from step 3."
                },
                {
                    "name": "$grok_page",
                    "description": "Clean page content in Markdown for xAI Grok from step 4."
                }
            ],
            "tool_id": "mcp:perplexity-ask:perplexity_ask",
            "output": "$pricing_json",
            "condition": null
        }
    ],
    "plan_inputs": []
}